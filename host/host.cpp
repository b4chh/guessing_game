#include <openenclave/host.h>
#include <stdio.h>
#include <chrono>
#include <thread>
#include <vector>
#include <string.h>
#include <iostream>
// Include the untrusted allocator_demo_u.h header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the helloworld.edl file.
#include "game_u.h"


// This is the function that the enclave will call back into to
// print a message.
void host_game()
{
    fprintf(stdout, "Enclave called into host to print: Hello World!\n");
}

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        std::string command = argv[i];
        if (command !=  "--simulate") {
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}


bool is_number(const std::string& s)
{
    std::string::const_iterator it = s.begin();
    while (it != s.end() && std::isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}

bool check_user_number(int data)
{
    if (data > 255 || data < 0)
        return false;
    return true;
}

int init_game()
{
    std::string data;
    std::cout << "Enter a max value for the gueesing game (must be inferior to 255) : ";
    std::cin >> data;
    if (!is_number(data)) {
        std::cout << "bad input" << std::endl;
        return 84;
    }
    if ((!check_user_number(std::stoi(data))) ) {
        std::cout << "bad input" << std::endl;
        init_game();
    }
    return std::stoi(data);
}

int main(int argc, const char* argv[])
{
    oe_result_t game;
    int ret = 1;
    int number = 0;
    oe_enclave_t* enclave = NULL;
    
    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv)) {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
        std::cout << "Running in simulation mode" << std::endl;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        goto exit;
    }
    number = init_game();
    // Create the enclave
    if (number == 84)
        return 84;
    std::cout << "max value : "  << number << std::endl;
    game = oe_create_game_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (game != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_game_enclave(): game=%u (%s)\n",
            game,
            oe_result_str(game));
        goto exit;
    }
    // Call into the enclave
    game = enclave_game(enclave);
    if (game != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_guessing_game failed: game=%u (%s)\n",
            game,
            oe_result_str(game));
        goto exit;
    }
    
    ret = 0;

exit:
    // Clean up the enclave if we created one
    if (enclave)
        oe_terminate_enclave(enclave);

    return ret;
}